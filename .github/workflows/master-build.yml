on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name : Install Dependencies
        run : npm install --ignore-scripts
      - name : Bootstrap Dependencies
        run : npx lerna bootstrap --no-ci
      - name : Run Tests
        run : npm run test
        env:
          CI: true

  build_docker:
    name: Build docker image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name : Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layer
        uses: actions/cache@v2
        with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.AWS_REGISTRY_ACCOUNT_ID }}.${{ secrets.INTEG_TEST_AWS_KEY_ID }}.dkr.ecr.us-west-2.amazonaws.com
          username: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          password: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
      - name: Build image and push to ECR
        uses: docker/build-push-action@v2
        with:
          file: integ-test/js-sdk-emitter/Dockerfile
          context: .
          tags: 611364707713.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-otel-js-sample-app:${{ github.sha }}
          push: true
          
          
  e2etest-ecs:
    strategy:
      matrix:
        type: [EC2, FARGATE]
    runs-on: ubuntu-latest
    needs: [build_docker]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2
          
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Check out testing framework
        uses: actions/checkout@v2
        with:
          repository: 'aws-observability/aws-otel-collector-test-framework'
          ref: 'terraform'

      - name: Run testing suite
        run: |
          cd terraform/ecs && terraform init && terraform apply -auto-approve -var="ecs_launch_type=${{ matrix.type }}" -var="aoc_image_repo=020628701572.dkr.ecr.us-west-2.amazonaws.com/aws/aws-otel-collector" -var="aoc_version=latest" -var="data_emitter_image=611364707713.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-otel-js-sample-app:${{ github.sha }}"

      - name: Destroy resources
        if: ${{ always() }}
        run: |
          cd terraform/ecs && terraform destroy -auto-approve
